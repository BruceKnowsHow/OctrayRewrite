clouds=off
oldHandLight=false
dynamicHandLight=true
oldLighting=false
underwaterOverlay=false
vignette=false
sun=false
moon=false
rain.depth=true
beacon.beam.depth=true
separateAo=true
frustum.culling=false

# Voxel data
size.buffer.colortex0=16384 8192
size.buffer.colortex1=16384 4096

version.1.16.5=G8_pre

backFace.solid=false
backFace.cutout=false
backFace.cutoutMipped=false
backFace.translucent=false

uniform.vec2.viewSize = vec2(viewWidth, viewHeight)
uniform.uint.ZERO = uint(0)
uniform.float.far2 = float(far)

alphaTest.gbuffers_textured=off
alphaTest.gbuffers_water=off

blend.gbuffers_textured=off
blend.gbuffers_water=off

texture.composite.depthtex1 = minecraft:textures/atlas/blocks.png
texture.composite.depthtex2 = minecraft:textures/atlas/blocks_n.png
texture.composite.shadowtex1 = minecraft:textures/atlas/blocks_s.png

variable.float.wSunDirX = sunPosition.x * gbufferModelView.0.0 + sunPosition.y * gbufferModelView.0.1 + sunPosition.z * gbufferModelView.0.2
variable.float.wSunDirY = sunPosition.x * gbufferModelView.1.0 + sunPosition.y * gbufferModelView.1.1 + sunPosition.z * gbufferModelView.1.2
variable.float.wSunDirZ = sunPosition.x * gbufferModelView.2.0 + sunPosition.y * gbufferModelView.2.1 + sunPosition.z * gbufferModelView.2.2
variable.float.sunLength = sqrt(wSunDirX*wSunDirX + wSunDirY*wSunDirY + wSunDirZ*wSunDirZ)
uniform.vec3.sunDirection = vec3(wSunDirZ / sunLength, wSunDirY / sunLength, wSunDirX / sunLength)

variable.bool.accum1 = (cameraPosition.x == previousCameraPosition.x) && (cameraPosition.y == previousCameraPosition.y) && (cameraPosition.z == previousCameraPosition.z)
variable.bool.accum2 = (gbufferPreviousModelView.0.0 == gbufferModelView.0.0) && (gbufferPreviousModelView.0.1 == gbufferModelView.0.1) && (gbufferPreviousModelView.0.2 == gbufferModelView.0.2)
variable.bool.accum3 = (gbufferPreviousModelView.3.0 == gbufferModelView.3.0) && (gbufferPreviousModelView.3.1 == gbufferModelView.3.1) && (gbufferPreviousModelView.3.2 == gbufferModelView.3.2)
variable.bool.accum4 = (gbufferPreviousProjection.0.0 == gbufferProjection.0.0) && (gbufferPreviousProjection.0.1 == gbufferProjection.0.1) && (gbufferPreviousProjection.0.2 == gbufferProjection.0.2)
uniform.bool.accum = accum1 && accum2 && accum3 && accum4

texture.composite.colortex11 = /../shaders/includes/textures/data16.bin TEXTURE_3D RGBA16F 256 128 33 RGBA HALF_FLOAT

texture.noise=/includes/textures/noise.png

screen.columns=1

screen = <empty> <empty> <empty> <empty> PT_ACCUMULATION PT_REPROJECTION RASTER_ENGINE [Misc]

screen.Misc = *