clouds=off
oldHandLight=false
dynamicHandLight=true
oldLighting=false
underwaterOverlay=false
vignette=false
sun=false
moon=false
rain.depth=true
beacon.beam.depth=true
separateAo=true

#ifdef FRUSTUM_CULLING
frustum.culling=true
#else
frustum.culling=false
#endif

# Voxel data
#if (VOXEL_BUFFER_HEIGHT == 1024)
size.buffer.colortex0=8192 1024
#elif (VOXEL_BUFFER_HEIGHT == 2048)
size.buffer.colortex0=8192 2048
#elif (VOXEL_BUFFER_HEIGHT == 4096)
size.buffer.colortex0=8192 4096
#elif (VOXEL_BUFFER_HEIGHT == 6144)
size.buffer.colortex0=8192 6144
#elif (VOXEL_BUFFER_HEIGHT == 12288)
size.buffer.colortex0=8192 12288
#elif (VOXEL_BUFFER_HEIGHT == 8192)
size.buffer.colortex0=8192 8192
#else
size.buffer.colortex0=8192 16384
#endif


#if (defined SUNLIGHT_RAYS) && (defined AMBIENT_RAYS) && (defined SPECULAR_RAYS)
#if (RAYBUFFER_MULT == 1)
size.buffer.colortex1=2.0 2.5
uniform.vec2.raybuffer_dims = vec2(viewWidth*2.0, viewHeight*2.5)
#elif (RAYBUFFER_MULT == 2)
size.buffer.colortex1=4.0 2.5
uniform.vec2.raybuffer_dims = vec2(viewWidth*4.0, viewHeight*2.5)
#elif (RAYBUFFER_MULT == 4)
size.buffer.colortex1=4.0 4.5
uniform.vec2.raybuffer_dims = vec2(viewWidth*4.0, viewHeight*4.5)
#endif
#else
#if (RAYBUFFER_MULT == 1)
size.buffer.colortex1=2.0 2.0
uniform.vec2.raybuffer_dims = vec2(viewWidth*2.0, viewHeight*2.0)
#elif (RAYBUFFER_MULT == 2)
size.buffer.colortex1=4.0 2.0
uniform.vec2.raybuffer_dims = vec2(viewWidth*4.0, viewHeight*2.0)
#elif (RAYBUFFER_MULT == 4)
size.buffer.colortex1=4.0 4.0
uniform.vec2.raybuffer_dims = vec2(viewWidth*4.0, viewHeight*4.0)
#endif
#endif


# POM Data
#ifdef PARALLAX
size.buffer.colortex2=4096 4096
#else
size.buffer.colortex2=1 1
#endif

# Sparse chunk data, raybuffer counters
size.buffer.colortex3=1024 514


version.1.16.5=G8_pre

backFace.solid=false
backFace.cutout=false
backFace.cutoutMipped=false
backFace.translucent=false

uniform.vec2.viewSize = vec2(viewWidth, viewHeight)
uniform.uint.ZERO = uint(0)
uniform.float.far2 = float(far)

alphaTest.gbuffers_textured=off
alphaTest.gbuffers_water=off

blend.gbuffers_textured=off
blend.gbuffers_water=off

texture.composite.depthtex1 = minecraft:textures/atlas/blocks.png
texture.composite.depthtex2 = minecraft:textures/atlas/blocks_n.png
texture.composite.shadowtex1 = minecraft:textures/atlas/blocks_s.png

variable.float.wSunDirX = sunPosition.x * gbufferModelView.0.0 + sunPosition.y * gbufferModelView.0.1 + sunPosition.z * gbufferModelView.0.2
variable.float.wSunDirY = sunPosition.x * gbufferModelView.1.0 + sunPosition.y * gbufferModelView.1.1 + sunPosition.z * gbufferModelView.1.2
variable.float.wSunDirZ = sunPosition.x * gbufferModelView.2.0 + sunPosition.y * gbufferModelView.2.1 + sunPosition.z * gbufferModelView.2.2
variable.float.sunLength = sqrt(wSunDirX*wSunDirX + wSunDirY*wSunDirY + wSunDirZ*wSunDirZ)
uniform.vec3.sunDirection = vec3(wSunDirZ / sunLength, wSunDirY / sunLength, wSunDirX / sunLength)

variable.bool.accum1 = (cameraPosition.x == previousCameraPosition.x) && (cameraPosition.y == previousCameraPosition.y) && (cameraPosition.z == previousCameraPosition.z)
variable.bool.accum2 = (gbufferPreviousModelView.0.0 == gbufferModelView.0.0) && (gbufferPreviousModelView.0.1 == gbufferModelView.0.1) && (gbufferPreviousModelView.0.2 == gbufferModelView.0.2)
variable.bool.accum3 = (gbufferPreviousModelView.3.0 == gbufferModelView.3.0) && (gbufferPreviousModelView.3.1 == gbufferModelView.3.1) && (gbufferPreviousModelView.3.2 == gbufferModelView.3.2)
variable.bool.accum4 = (gbufferPreviousProjection.0.0 == gbufferProjection.0.0) && (gbufferPreviousProjection.0.1 == gbufferProjection.0.1) && (gbufferPreviousProjection.0.2 == gbufferProjection.0.2)
uniform.bool.accum = accum1 && accum2 && accum3 && accum4

texture.composite.colortex15 = /../textures/data16.bin TEXTURE_2D RGBA16F 256 4224 RGBA HALF_FLOAT

texture.noise=/../textures/noise.png

screen.columns=1
screen.Performance.columns=1
screen.Pathtracing.columns=1
screen.Color.columns=1
screen.Effects.columns=1
screen.Debug.columns=1

screen = <empty> <empty> [Performance] <empty> [Pathtracing] [Color] [Effects] <empty> [Debug]

screen.Performance = <empty> <empty> <empty> <empty> FRUSTUM_CULLING RAYBUFFER_MULT VOXEL_BUFFER_HEIGHT
screen.Pathtracing = <empty> MAX_LIGHT_BOUNCES <empty> SUNLIGHT_RAYS AMBIENT_RAYS SPECULAR_RAYS <empty> ANY_ATROUS_FILTER REPROJECT
screen.Color = <empty> <empty> <empty> <empty> EXPOSURE LOWLIGHT_EYE

screen.Effects = <empty> <empty> <empty> <empty> BLOOM TAA

screen.Debug = <empty> <empty> <empty> <empty> <empty> RASTER_ENGINE DEBUG <empty> [Misc]
screen.Misc = *

sliders = MAX_LIGHT_BOUNCES EXPOSURE sunPathRotation RAYBUFFER_MULT VOXEL_BUFFER_HEIGHT

program.world0/composite5.enabled=ANY_ATROUS_FILTER && ATROUS_FILTER_PASSES_1
program.world-1/composite5.enabled=ANY_ATROUS_FILTER && ATROUS_FILTER_PASSES_1
program.world1/composite5.enabled=ANY_ATROUS_FILTER && ATROUS_FILTER_PASSES_1

program.world0/composite6.enabled=ANY_ATROUS_FILTER && ATROUS_FILTER_PASSES_2
program.world-1/composite6.enabled=ANY_ATROUS_FILTER && ATROUS_FILTER_PASSES_2
program.world1/composite6.enabled=ANY_ATROUS_FILTER && ATROUS_FILTER_PASSES_2

program.world0/composite7.enabled=ANY_ATROUS_FILTER && ATROUS_FILTER_PASSES_3
program.world-1/composite7.enabled=ANY_ATROUS_FILTER && ATROUS_FILTER_PASSES_3
program.world1/composite7.enabled=ANY_ATROUS_FILTER && ATROUS_FILTER_PASSES_3

program.world0/composite8.enabled=ANY_ATROUS_FILTER && ATROUS_FILTER_PASSES_4
program.world-1/composite8.enabled=ANY_ATROUS_FILTER && ATROUS_FILTER_PASSES_4
program.world1/composite8.enabled=ANY_ATROUS_FILTER && ATROUS_FILTER_PASSES_4

program.world0/composite9.enabled=ANY_ATROUS_FILTER && ATROUS_FILTER_PASSES_5
program.world-1/composite9.enabled=ANY_ATROUS_FILTER && ATROUS_FILTER_PASSES_5
program.world1/composite9.enabled=ANY_ATROUS_FILTER && ATROUS_FILTER_PASSES_5

program.world0/composite12.enabled=BLOOM
program.world-1/composite12.enabled=BLOOM
program.world1/composite12.enabled=BLOOM

variable.int.taaJitterIndex = frameCounter % 16
variable.int.taaPrevJitterIndex = (frameCounter - 1) % 16

#ifdef TAA
uniform.vec2.taaJitter = vec2((if( \
	taaJitterIndex ==  0,   0.0  / 16.0,  taaJitterIndex ==  1,  -8.0  / 16.0, \
	taaJitterIndex ==  2,   2.0  / 16.0,  taaJitterIndex ==  3,  -10.0 / 16.0, \
	taaJitterIndex ==  4,   12.0 / 16.0,  taaJitterIndex ==  5,  -4.0  / 16.0, \
	taaJitterIndex ==  6,   14.0 / 16.0,  taaJitterIndex ==  7,  -6.0  / 16.0, \
	taaJitterIndex ==  8,  -3.0  / 16.0,  taaJitterIndex ==  9,   11.0 / 16.0, \
	taaJitterIndex == 10,  -1.0  / 16.0,  taaJitterIndex == 11,   9.0  / 16.0, \
	taaJitterIndex == 12,  -15.0 / 16.0,  taaJitterIndex == 13,   7.0  / 16.0, \
	taaJitterIndex == 14,  -13.0 / 16.0,  taaJitterIndex == 15,   5.0  / 16.0, \
	0.0) \
) / viewWidth, \
(if( \
	taaJitterIndex ==  0,  -3.0  / 16.0,  taaJitterIndex ==  1,   11.0 / 16.0, \
	taaJitterIndex ==  2,   1.0  / 16.0,  taaJitterIndex ==  3,  -9.0  / 16.0, \
	taaJitterIndex ==  4,  -15.0 / 16.0,  taaJitterIndex ==  5,   7.0  / 16.0, \
	taaJitterIndex ==  6,   13.0 / 16.0,  taaJitterIndex ==  7,  -5.0  / 16.0, \
	taaJitterIndex ==  8,   0.0  / 16.0,  taaJitterIndex ==  9,  -8.0  / 16.0, \
	taaJitterIndex == 10,  -2.0  / 16.0,  taaJitterIndex == 11,   10.0 / 16.0, \
	taaJitterIndex == 12,   12.0 / 16.0,  taaJitterIndex == 13,  -4.0  / 16.0, \
	taaJitterIndex == 14,  -14.0 / 16.0,  taaJitterIndex == 15,   6.0  / 16.0, \
	0.0) \
) / viewHeight)

uniform.vec2.taaPrevJitter = vec2((if( \
	taaPrevJitterIndex ==  0,   0.0  / 16.0,  taaPrevJitterIndex ==  1,  -8.0  / 16.0, \
	taaPrevJitterIndex ==  2,   2.0  / 16.0,  taaPrevJitterIndex ==  3,  -10.0 / 16.0, \
	taaPrevJitterIndex ==  4,   12.0 / 16.0,  taaPrevJitterIndex ==  5,  -4.0  / 16.0, \
	taaPrevJitterIndex ==  6,   14.0 / 16.0,  taaPrevJitterIndex ==  7,  -6.0  / 16.0, \
	taaPrevJitterIndex ==  8,  -3.0  / 16.0,  taaPrevJitterIndex ==  9,   11.0 / 16.0, \
	taaPrevJitterIndex == 10,  -1.0  / 16.0,  taaPrevJitterIndex == 11,   9.0  / 16.0, \
	taaPrevJitterIndex == 12,  -15.0 / 16.0,  taaPrevJitterIndex == 13,   7.0  / 16.0, \
	taaPrevJitterIndex == 14,  -13.0 / 16.0,  taaPrevJitterIndex == 15,   5.0  / 16.0, \
	0.0) \
) / viewWidth, \
(if( \
	taaPrevJitterIndex ==  0,  -3.0  / 16.0,  taaPrevJitterIndex ==  1,   11.0 / 16.0, \
	taaPrevJitterIndex ==  2,   1.0  / 16.0,  taaPrevJitterIndex ==  3,  -9.0  / 16.0, \
	taaPrevJitterIndex ==  4,  -15.0 / 16.0,  taaPrevJitterIndex ==  5,   7.0  / 16.0, \
	taaPrevJitterIndex ==  6,   13.0 / 16.0,  taaPrevJitterIndex ==  7,  -5.0  / 16.0, \
	taaPrevJitterIndex ==  8,   0.0  / 16.0,  taaPrevJitterIndex ==  9,  -8.0  / 16.0, \
	taaPrevJitterIndex == 10,  -2.0  / 16.0,  taaPrevJitterIndex == 11,   10.0 / 16.0, \
	taaPrevJitterIndex == 12,   12.0 / 16.0,  taaPrevJitterIndex == 13,  -4.0  / 16.0, \
	taaPrevJitterIndex == 14,  -14.0 / 16.0,  taaPrevJitterIndex == 15,   6.0  / 16.0, \
	0.0) \
) / viewHeight)
#else
uniform.vec2.taaJitter = vec2(0.0, 0.0);
uniform.vec2.taaPrevJitter = vec2(0.0, 0.0);
#endif